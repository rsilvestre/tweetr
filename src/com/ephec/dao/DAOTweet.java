package com.ephec.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ephec.beans.ReTweet;
import com.ephec.beans.TweetIn;
import com.ephec.beans.TweetOut;
import com.ephec.beans.User;
import com.ephec.dao.DAOFactory;
import com.ephec.exceptions.DAOException;
import com.ephec.utility.UserUtility;


public class DAOTweet implements DAOITweet {

    private DAOFactory daoFactory;

    DAOTweet(DAOFactory daoFactory) {
        this.daoFactory = daoFactory;
    }

    private static final String SQL_INSERTTWEETIN = "INSERT INTO tweet (UserId, Message, Timestamp) VALUES (?,?, NOW())";

    private static final String SQL_SELECTTWEETOUT = "select  sel.tid as tweetId, sel.tm as message, sel. ruid as ruid, sel.par, sel.uorig, u.userName as userName, sel.rstamp " +
            " from ( SELECT  t.tweetId as tid, t.message as tm, r.UserId as ruid, u.username as par, t.UserId as uorig, r.Timestamp as rstamp " +
            " FROM tweet as t " +
            " right join retweet as r " +
            " on r.TweetId = t.TweetId and r.UserId in (select f.followingid from follow as f  where f.followerid = ?) " +
            " left join user as u " +
            " on r.UserId = u.UserId " +
            " WHERE ((t.userid) in (select f.followingid from follow as f  where f.followerid = ?)) " +
            " union " +
            " SELECT  t.tweetId as tid, t.message  as tm, -1, null,t.UserId as uorig, t.Timestamp as rstamp " +
            " FROM tweet as t " +
            " WHERE ((t.userid) in (select f.followingid from follow as f  where f.followerid = ?)) and (t.TweetId) not in (select r.TweetId from retweet as r  where r.TweetId=t.TweetId) " +
            " union " +
            " SELECT  t.tweetId as tid, t.message  as tm, 0, null,t.UserId as uorig, t.Timestamp as rstamp " +
            " FROM tweet as t " +
            " WHERE ((t.userid) in (select f.followingid from follow as f  where f.followerid = ?)) and (t.TweetId) in (select r.TweetId from retweet as r  where r.TweetId=t.TweetId)) " +
            " as sel " +
            " left join user as u " +
            " on sel.uorig = u.UserId " +
            " order by rstamp desc " +
            " limit 25";

    private static final String SQL_INSERTRETWEET = "INSERT INTO retweet(TweetId, UserId, Timestamp) VALUES (?,?,NOW())";
    private final String SQL_DELETE_RETWEET = "DELETE FROM retweet where userid = ?";
    private final String SQL_DELETE_TWEET = "DELETE FROM tweet where userid = ?";

    @Override
    public TweetIn createTweet(TweetIn tweet) {

        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_INSERTTWEETIN, true, tweet.getUserId(), tweet.getMessage());
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la création du Tweet, aucune ligne ajoutée dans la table.");
            }
            // Récupération de l'id auto-généré par la requête d'insertion
            AutoGeneratedValue = preparedStatement.getGeneratedKeys();
            if (AutoGeneratedValue.next()) {
                /*
				 * Puis initialisation de la propriété id du bean Utilisateur
				 * avec sa valeur
				 */
                tweet.setTwitId(AutoGeneratedValue.getInt(1));
            } else {
                throw new DAOException(
                        "Échec de la création du Tweet en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }
        return tweet;

    }

    @Override
    public void deleteTweet(int userId) {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_DELETE_TWEET, false, userId);
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la création du Tweet, aucune ligne ajoutée dans la table.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }

    }

    @Override
    public void deleteReTweet(int userId) {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_DELETE_RETWEET, false, userId);
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la création du Tweet, aucune ligne ajoutée dans la table.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }
    }


    @Override
    public List<TweetOut> getTweetOutList(User user) {

        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        TweetOut tweetOut = new TweetOut();
        List<TweetOut> tweetsOut = new ArrayList<TweetOut>();

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_SELECTTWEETOUT, false, user.getUserId(), user.getUserId(), user.getUserId(), user.getUserId());

            resultSet = preparedStatement.executeQuery();
			/* Parcours de la ligne de données de l'éventuel ResulSet retourné */

            while (resultSet.next()) {
                tweetOut = mapTweetOut(resultSet);
                tweetsOut.add(tweetOut);
            }


        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(preparedStatement, connexion);
        }
        return tweetsOut;
    }

    private static TweetOut mapTweetOut(ResultSet resultSet) throws SQLException {
        TweetOut tweetOut = new TweetOut();
        tweetOut.setTweetId(resultSet.getInt("tweetId"));
        tweetOut.setUserName(resultSet.getString("userName"));
        tweetOut.setMessage(resultSet.getString("message"));
        tweetOut.setPar(resultSet.getString("par"));
        tweetOut.setRuid(resultSet.getInt("ruid"));
        tweetOut.setUorig(resultSet.getInt("uorig"));
        return tweetOut;
    }

    @Override
    public ReTweet reTweet(ReTweet reTweet) {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_INSERTRETWEET, true, reTweet.getReTweetid(), reTweet.getUserId());
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la création du Tweet, aucune ligne ajoutée dans la table.");
            }
            // Récupération de l'id auto-généré par la requête d'insertion
            AutoGeneratedValue = preparedStatement.getGeneratedKeys();
            if (AutoGeneratedValue.next()) {
				/*
				 * Puis initialisation de la propriété id du bean Utilisateur
				 * avec sa valeur
				 */
                reTweet.setTweetId(AutoGeneratedValue.getInt(1));
            } else {
                throw new DAOException(
                        "Échec de la création du Tweet en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }
        return reTweet;
    }
}
