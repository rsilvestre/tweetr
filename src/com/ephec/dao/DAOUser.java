package com.ephec.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ephec.beans.User;
import com.ephec.exceptions.DAOException;
import com.ephec.utility.UserUtility;

public class DAOUser implements DAOIUser {

    private DAOFactory daoFactory;

    DAOUser(DAOFactory daoFactory) {
        this.daoFactory = daoFactory;
    }

    private static final String SQL_INSERT = "INSERT INTO user (userName, firstName, lastName, email, password, profileImage, timestamp) VALUES (?,?,?, ?, ?,?, NOW())";

    private static final String SQL_SEARCH_USER_BY_USERNAME = "SELECT UserId, userName, firstName, lastName, email, password, profileImage FROM User WHERE UserName = ?";

    private static final String SQL_SEARCH_USER_BY_EMAIL = "SELECT UserId, userName, firstName, lastName, email, password, profileImage FROM User WHERE Email = ?";

    private static final String SQL_SEARCH_FOLLOWING_USER_BY_ANYNAME_LIKE = "SELECT distinct u.userId, u.userName, u.firstName, u.lastName, u.profileimage FROM user as u where (LOWER(u.userName like ?) or LOWER(u.firstName like ?) or LOWER(u.lastName like ?)) and (u.userid in (SELECT f.followingid from follow as f where f.followerid = ?)) and (u.userid <> ?)";

    private static final String SQL_SEARCH_NOT_FOLLOWING_USER_BY_ANYNAME_LIKE = "SELECT distinct u.userId, u.userName, u.firstName, u.lastName, u.profileimage FROM user as u where (LOWER(u.userName like ?) or LOWER(u.firstName like ?) or LOWER(u.lastName like ?)) and (u.userid not in (SELECT f.followingid from follow as f where f.followerid = ?)) and (u.userid <> ? )";

    private static final String SQL_UPDATE_USER = "UPDATE user set userName = ?, firstName = ?, lastName = ?, email = ?, password = ?, profileImage = ? where userId = ? ";

    private final static String SQL_DELETE_USER = "DELETE FROM user where userid = ?";

    @Override
    public void create(User user) throws DAOException {

        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_INSERT, true, user.getUserName(),
                    user.getFirstName(), user.getLastName(), user.getEmail(),
                    user.getPassword(), user.getProfileImage());
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table.");
            }
            // Récupération de l'id auto-généré par la requête d'insertion
            AutoGeneratedValue = preparedStatement.getGeneratedKeys();
            if (AutoGeneratedValue.next()) {
                /*
				 * Puis initialisation de la propriété id du bean Utilisateur
				 * avec sa valeur
				 */
                user.setUserId(AutoGeneratedValue.getInt(1));
            } else {
                throw new DAOException(
                        "Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }

    }

    @Override
    public void delete(int userId) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_DELETE_USER, true, userId);
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table.");
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }

    }

    @Override
    public void update(User user) throws DAOException {

        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet AutoGeneratedValue = null;

        try {
            // Récupération d'une connexion depuis la Factory
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_UPDATE_USER, false, user.getUserName(),
                    user.getFirstName(), user.getLastName(), user.getEmail(),
                    user.getPassword(), user.getProfileImage(), user.getUserId());
            int status = preparedStatement.executeUpdate();
            // Analyse du statut retourné par la requête d'insertion
            if (status == 0) {
                throw new DAOException(
                        "Échec de la modification de l'utilisateur, aucune ligne n'a été modifiée dans la table.");
            }

        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(AutoGeneratedValue,
                    preparedStatement, connexion);
        }

    }

    @Override
    public User searchByUserName(String userName) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;

        try {
			/* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_SEARCH_USER_BY_USERNAME, false, userName);
            resultSet = preparedStatement.executeQuery();
			/* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            if (resultSet.next()) {
                user = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(resultSet, preparedStatement, connexion);
        }
        return user;
    }

    @Override
    public User searchByEmail(String email) throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;

        try {
			/* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_SEARCH_USER_BY_EMAIL, false, email);
            resultSet = preparedStatement.executeQuery();
			/* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            if (resultSet.next()) {
                user = map(resultSet);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(resultSet, preparedStatement, connexion);
        }

        return user;
    }


    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des utilisateurs (un
     * ResultSet) et un bean Utilisateur.
     */
    private static User map(ResultSet resultSet) throws SQLException {
        User user = new User();
        user.setUserId(resultSet.getInt("userId"));
        user.setUserName(resultSet.getString("userName"));
        user.setFirstName(resultSet.getString("firstName"));
        user.setLastName(resultSet.getString("lastName"));
        user.setEmail(resultSet.getString("email"));
        user.setPassword(resultSet.getString("password"));
        user.setProfileImage(resultSet.getString("profileImage"));
        return user;
    }

    private static User map2(ResultSet resultSet) throws SQLException {
        User user = new User();
        user.setUserId(resultSet.getInt("userId"));
        user.setUserName(resultSet.getString("userName"));
        user.setFirstName(resultSet.getString("firstName"));
        user.setLastName(resultSet.getString("lastName"));
        user.setProfileImage(resultSet.getString("profileImage"));
        return user;
    }


    @Override
    public List<User> searchFollowingByAnyNameLike(String keyword, int userId)
            throws DAOException {

        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<User> userFollowingList = new ArrayList<User>();
        User user = new User();
        String sqlKeyword = "%" + keyword + "%";

        try {
			/* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_SEARCH_FOLLOWING_USER_BY_ANYNAME_LIKE, false, sqlKeyword, sqlKeyword, sqlKeyword, userId, userId);
            resultSet = preparedStatement.executeQuery();
			/* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            while (resultSet.next()) {
                user = map2(resultSet);
                userFollowingList.add(user);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(resultSet, preparedStatement, connexion);
        }
        return userFollowingList;
    }

    @Override
    public List<User> searchNotFollowingByAnyNameLike(String keyword, int userId)
            throws DAOException {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        List<User> userNotFollowingList = new ArrayList<User>();
        User user = new User();
        String sqlKeyword = "%" + keyword + "%";

        try {
				/* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = UserUtility.preparedRequestInitialization(
                    connexion, SQL_SEARCH_NOT_FOLLOWING_USER_BY_ANYNAME_LIKE, false, sqlKeyword, sqlKeyword, sqlKeyword, userId, userId);
            resultSet = preparedStatement.executeQuery();
				/* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            while (resultSet.next()) {
                user = map2(resultSet);
                userNotFollowingList.add(user);
            }
        } catch (SQLException e) {
            throw new DAOException(e);
        } finally {
            DAOClose.silentClose(resultSet, preparedStatement, connexion);
        }

        return userNotFollowingList;
    }


}
