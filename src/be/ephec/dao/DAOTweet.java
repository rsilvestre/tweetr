package be.ephec.dao;

import be.ephec.beans.ReTweet;
import be.ephec.beans.TweetIn;
import be.ephec.beans.TweetOut;
import be.ephec.beans.User;
import be.ephec.exceptions.DAOException;
import be.ephec.utilities.EntityMapping;
import be.ephec.utilities.EscapeChars;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class DAOTweet extends DAO implements DAOITweet {

    private static final String SQL_INSERTTWEETIN = "INSERT INTO tweet (UserId, Body, UpdatedAt) VALUES (?,?, NOW())";
    private static final String SQL_SELECTTWEETOUT = "select sel.tid as tweetId, sel.tm as body, sel.ruid as ruid, sel.par, sel.uorig, uo.userName as userName, ui.image as uorigImage, sel.rstamp as updatedAt from (SELECT t.tweetId as tid, t.body as tm, r.UserId as ruid, u.username as par, t.UserId as uorig, r.UpdatedAt as rstamp FROM tweet as t right join retweet as r ON r.TweetId = t.TweetId and r.UserId in (select f.followingid from follow as f where f.followerid = ?) left join user as u ON r.UserId = u.UserId WHERE ((t.userid) in (select f.followingid from follow as f where f.followerid = ?)) union SELECT t.tweetId as tid, t.body as tm, - 1, null, t.UserId as uorig, t.UpdatedAt as rstamp FROM tweet as t WHERE ((t.userid) in (select f.followingid from follow as f where f.followerid = ?)) and (t.TweetId) not in (select r.TweetId from retweet as r where r.TweetId = t.TweetId) union SELECT t.tweetId as tid, t.body as tm, 0, null, t.UserId as uorig, t.UpdatedAt as rstamp FROM tweet as t WHERE ((t.userid) in (select f.followingid from follow as f where f.followerid = ?)) and (t.TweetId) in (select r.TweetId from retweet as r where r.TweetId = t.TweetId) union SELECT t.tweetId as tid, t.body as tm, -1, null, t.UserId as uorig, t.UpdatedAt as rstamp FROM tweet as t left join user as u ON t.UserId = u.UserId WHERE t.UserId = ? union select t.tweetId as tid, t.body as tm, r.UserId, u.UserName, t.UserId as uorig, r.UpdatedAt as rstamp from Tweet as t left join Retweet as r ON t.TweetId = r.TweetId left join User as u ON u.UserId = r.UserId where r.UserId = ? ) as sel left join user as ui ON if(sel.ruid>0,sel.ruid,sel.uorig) = ui.UserId left join user as uo ON sel.uorig = uo.UserId order by rstamp desc limit 25;";
    private static final String SQL_INSERTRETWEET = "INSERT INTO retweet(TweetId, UserId, UpdatedAt) VALUES (?,?,NOW())";
    private static final String SQL_DELETE_RETWEET = "DELETE FROM retweet where userid = ?";
    private static final String SQL_DELETE_TWEET = "DELETE FROM tweet where userid = ?";
    private static final String SELECT_TWEET_FROM_USER = "select tweetId, body, -1 as ruid, -1 as par, u.UserId as uorig, u.userName as userName, u.image as uorigImage, t.updatedAt FROM Tweet as t LEFT JOIN User  as u on u.UserId = t.UserId where t.UserId = ? ORDER By t.updatedAt DESC;";

    DAOTweet(DAOFactory daoFactory) {
        super(daoFactory);
    }

    @Override
    public TweetIn createTweet(TweetIn tweet) throws DAOException {
        try {
            this.executeUpdate(SQL_INSERTTWEETIN, (status, AutoGeneratedValue) -> {
                if (status == 0) {
                    throw new DAOException(
                            "Échec de la création du Tweet, aucune ligne ajoutée dans la table.");
                }
                if (AutoGeneratedValue.next()) {
                    tweet.setTwitId(AutoGeneratedValue.getInt(1));
                } else {
                    throw new DAOException("Échec de la création du Tweet en base, aucun ID auto-généré retourné.");
                }
                this.CloseConnection();
            }, tweet.getUserId(), tweet.getBody());
        } catch (SQLException e) {
            throw new DAOException(e);
        }
        return tweet;
    }

    @Override
    public void deleteTweet(int userId) throws DAOException {
        try {
            this.executeUpdate(SQL_DELETE_TWEET, (status, resultSet) -> {
                if (status < 0) {
                    throw new DAOException("Échec de la suppression du Tweet, aucune ligne supprimée dans la table.");
                }
            }, userId);
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    @Override
    public void deleteReTweet(int userId) throws DAOException {
        try {
            this.executeUpdate(SQL_DELETE_RETWEET, (status, resultSet) -> {
                if (status < 0) {
                    throw new DAOException(
                            "Échec de la suppression du Retweet, aucune ligne supprimée dans la table.");
                }
            }, userId);
        } catch (SQLException e) {
            throw new DAOException(e);
        }
    }

    @Override
    public List<TweetOut> getLstTweetOutByUser(User user) throws DAOException {
        List<TweetOut> lstTweetOut = new ArrayList<>();
        try {
            ResultSet resultSet = this.executeQuery(SELECT_TWEET_FROM_USER, false, user.getUserId());
            Pattern pat = Pattern.compile("@([\\w]+)");

            while (resultSet.next()) {
                EntityMapping<TweetOut> EntityMapping = new EntityMapping<>(TweetOut.class);
                try {
                    TweetOut tmpTweetOut = EntityMapping.getMapping(resultSet);
                    Matcher match = pat.matcher(tmpTweetOut.getBody());

                    if (match.find()) {
                        String action = match.group(1);
                        DAOUser daoUser = new DAOUser(DAOFactory.getInstance());
                        User user1 = daoUser.searchByUserName(action);
                        tmpTweetOut.setBody(EscapeChars.forHTML(tmpTweetOut.getBody()).replace("@" + action, "<a class=\"\" href=\"/User?id=" + user1.getUserId() + "\"><strong class=\"center-middle-txt\">@" + action + "</strong></a>"));
                    }
                    lstTweetOut.add(tmpTweetOut);
                } catch (Exception e) {
                    throw new DAOException(e);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return lstTweetOut;
    }

    @Override
    public List<TweetOut> getTweetOutList(User user) throws DAOException {
        List<TweetOut> lstTweetOut = new ArrayList<>();
        try {
            ResultSet resultSet = this.executeQuery(SQL_SELECTTWEETOUT, false, user.getUserId(), user.getUserId(), user.getUserId(), user.getUserId(), user.getUserId(), user.getUserId());
            Pattern pat = Pattern.compile("@([\\w]+)");
            while (resultSet.next()) {
                EntityMapping<TweetOut> EntityMapping = new EntityMapping<>(TweetOut.class);
                try {
                    TweetOut tmpTweetOut = EntityMapping.getMapping(resultSet);
                    Matcher match = pat.matcher(tmpTweetOut.getBody());

                    if (match.find()) {
                        String action = match.group(1);
                        DAOUser daoUser = new DAOUser(DAOFactory.getInstance());
                        User user1 = daoUser.searchByUserName(action);
                        tmpTweetOut.setBody(EscapeChars.forHTML(tmpTweetOut.getBody()).replace("&#064;" + action, "<a class=\"\" href=\"/User?id=" + user1.getUserId() + "\"><strong class=\"center-middle-txt\">&#064;" + action + "</strong></a>"));
                    }
                    lstTweetOut.add(tmpTweetOut);
                } catch (Exception e) {
                    throw new DAOException(e);
                }
            }
        } catch (Exception e) {
            throw new DAOException(e);
        } finally {
            this.CloseConnection();
        }
        return lstTweetOut;
    }

    @Override
    public ReTweet reTweet(ReTweet reTweet) throws DAOException {
        try {
            this.executeUpdate(SQL_INSERTRETWEET, (status, AutoGeneratedValue) -> {
                if (status == 0) {
                    throw new DAOException(
                            "Échec de la création du Tweet, aucune ligne ajoutée dans la table.");
                }
                if (AutoGeneratedValue.next()) {
                    reTweet.setTweetId(AutoGeneratedValue.getInt(1));
                } else {
                    throw new DAOException("Échec de la création du Tweet en base, aucun ID auto-généré retourné.");
                }
                this.CloseConnection();
            }, reTweet.getReTweetid(), reTweet.getUserId());
        } catch (SQLException e) {
            this.CloseConnection();
            throw new DAOException(e);
        }
        return reTweet;
    }
}
